diff --git a/django_mongodb_engine/base.py b/django_mongodb_engine/base.py
index 12ddd2e..6895490 100644
--- a/django_mongodb_engine/base.py
+++ b/django_mongodb_engine/base.py
@@ -49,7 +49,7 @@ class DatabaseOperations(NonrelDatabaseOperations):
         return 254
 
     def check_aggregate_support(self, aggregate):
-        import aggregations
+        from . import aggregations
         try:
             getattr(aggregations, aggregate.__class__.__name__)
         except AttributeError:
@@ -84,7 +84,7 @@ class DatabaseOperations(NonrelDatabaseOperations):
         """
         if value is None:
             return None
-        return unicode(value)
+        return str(value)
 
     def _value_for_db(self, value, field, field_kind, db_type, lookup):
         """
@@ -114,7 +114,7 @@ class DatabaseOperations(NonrelDatabaseOperations):
 
             # Provide a better message for invalid IDs.
             except (TypeError, InvalidId):
-                if isinstance(value, (str, unicode)) and len(value) > 13:
+                if isinstance(value, str) and len(value) > 13:
                     value = value[:10] + '...'
                 msg = "AutoField (default primary key) values must be " \
                       "strings representing an ObjectId on MongoDB (got " \
@@ -148,7 +148,7 @@ class DatabaseOperations(NonrelDatabaseOperations):
 
         # All keys have been turned into ObjectIds.
         if db_type == 'key':
-            value = unicode(value)
+            value = str(value)
 
         # We've converted dates and times to datetimes.
         elif db_type == 'date':
@@ -238,7 +238,7 @@ class DatabaseWrapper(NonrelDatabaseWrapper):
                                     'update': flags}
 
         # Lower-case all OPTIONS keys.
-        for key in options.iterkeys():
+        for key in options.keys():
             options[key.lower()] = options.pop(key)
 
         read_preference = options.get('read_preference')
@@ -269,7 +269,7 @@ class DatabaseWrapper(NonrelDatabaseWrapper):
             self.database = self.connection[db_name]
         except TypeError:
             exc_info = sys.exc_info()
-            raise ImproperlyConfigured, exc_info[1], exc_info[2]
+            raise ImproperlyConfigured(exc_info[1]).with_traceback(exc_info[2])
 
         if user and password:
             if not self.database.authenticate(user, password):
diff --git a/django_mongodb_engine/compiler.py b/django_mongodb_engine/compiler.py
index aac1c59..b1c92be 100644
--- a/django_mongodb_engine/compiler.py
+++ b/django_mongodb_engine/compiler.py
@@ -82,10 +82,10 @@ def safe_call(func):
     def wrapper(*args, **kwargs):
         try:
             return func(*args, **kwargs)
-        except DuplicateKeyError, e:
-            raise IntegrityError, IntegrityError(smart_str(e)), sys.exc_info()[2]
-        except PyMongoError, e:
-            raise DatabaseError, DatabaseError(smart_str(e)), sys.exc_info()[2]
+        except DuplicateKeyError as e:
+            raise IntegrityError(IntegrityError(smart_str(e))).with_traceback(sys.exc_info()[2])
+        except PyMongoError as e:
+            raise DatabaseError(DatabaseError(smart_str(e))).with_traceback(sys.exc_info()[2])
     return wrapper
 
 
@@ -227,7 +227,7 @@ class MongoQuery(NonrelQuery):
                     # {'a': o1} + {'a': {'$not': o2}} -->
                     #     {'a': {'$all': [o1], '$nin': [o2]}}
                     if already_negated:
-                        assert lookup.keys() == ['$ne']
+                        assert list(lookup.keys()) == ['$ne']
                         lookup = lookup['$ne']
                     assert not isinstance(lookup, dict)
                     subquery[column] = {'$all': [existing], '$nin': [lookup]}
@@ -236,8 +236,8 @@ class MongoQuery(NonrelQuery):
                 if not_:
                     assert not existing
                     if isinstance(lookup, dict):
-                        assert lookup.keys() == ['$ne']
-                        lookup = lookup.values()[0]
+                        assert list(lookup.keys()) == ['$ne']
+                        lookup = list(lookup.values())[0]
                     assert not isinstance(lookup, dict), (not_, lookup)
                     if self._negated:
                         # {'not': {'a': o1}} + {'a': {'not': o2}} -->
@@ -272,7 +272,7 @@ class MongoQuery(NonrelQuery):
                                 # {'$gt': o1} + {'$lt': o2}
                                 #    --> {'$gt': o1, '$lt': o2}
                                 assert all(key not in existing
-                                           for key in lookup.keys()), \
+                                           for key in list(lookup.keys())), \
                                        [lookup, existing]
                                 existing.update(lookup)
                     else:
@@ -300,7 +300,7 @@ class SQLCompiler(NonrelCompiler):
         Handles aggregate/count queries.
         """
         collection = self.get_collection()
-        aggregations = self.query.aggregate_select.items()
+        aggregations = list(self.query.aggregate_select.items())
 
         if len(aggregations) == 1 and isinstance(aggregations[0][1],
                                                  sqlaggregates.Count):
diff --git a/django_mongodb_engine/creation.py b/django_mongodb_engine/creation.py
index 6ccd62d..75ebeea 100644
--- a/django_mongodb_engine/creation.py
+++ b/django_mongodb_engine/creation.py
@@ -36,8 +36,8 @@ class DatabaseCreation(NonrelDatabaseCreation):
 
         def ensure_index(*args, **kwargs):
             if ensure_index.first_index:
-                print "Installing indices for %s.%s model." % \
-                      (meta.app_label, meta.object_name)
+                print("Installing indices for %s.%s model." % \
+                      (meta.app_label, meta.object_name))
                 ensure_index.first_index = False
             return collection.ensure_index(*args, **kwargs)
         ensure_index.first_index = True
@@ -208,8 +208,8 @@ class DatabaseCreation(NonrelDatabaseCreation):
 
     def destroy_test_db(self, old_database_name, verbosity=1):
         if verbosity >= 1:
-            print "Destroying test database for alias '%s'..." % \
-                  self.connection.alias
+            print("Destroying test database for alias '%s'..." % \
+                  self.connection.alias)
         test_database_name = self.connection.settings_dict['NAME']
         self._drop_database(test_database_name)
         self.connection.settings_dict['NAME'] = old_database_name
diff --git a/django_mongodb_engine/fields.py b/django_mongodb_engine/fields.py
index 5c815b9..eebd1ac 100644
--- a/django_mongodb_engine/fields.py
+++ b/django_mongodb_engine/fields.py
@@ -165,7 +165,7 @@ try:
     # Used to satisfy South when introspecting models that use
     # GridFSField/GridFSString fields. Custom rules could be added
     # if needed.
-    from south.modelsinspector import add_introspection_rules
+    from .south.modelsinspector import add_introspection_rules
     add_introspection_rules(
         [], ['^django_mongodb_engine\.fields\.GridFSField'])
     add_introspection_rules(
diff --git a/django_mongodb_engine/router.py b/django_mongodb_engine/router.py
index bdecb09..eaa5b7b 100644
--- a/django_mongodb_engine/router.py
+++ b/django_mongodb_engine/router.py
@@ -5,7 +5,7 @@ from django.core.exceptions import ImproperlyConfigured
 _mongodbs = []
 
 def _init_mongodbs():
-    for name, options in settings.DATABASES.iteritems():
+    for name, options in settings.DATABASES.items():
         if options['ENGINE'] != 'django_mongodb_engine':
             continue
         if options.get('IS_DEFAULT'):
diff --git a/django_mongodb_engine/south_adapter.py b/django_mongodb_engine/south_adapter.py
index 5d1138c..08713d4 100644
--- a/django_mongodb_engine/south_adapter.py
+++ b/django_mongodb_engine/south_adapter.py
@@ -1,5 +1,5 @@
 # This is needed until the sibling south module is removed
-from __future__ import absolute_import 
+ 
 
 from django.core.exceptions import ImproperlyConfigured
 from django.db.models.fields import NOT_PROVIDED
diff --git a/django_mongodb_engine/storage.py b/django_mongodb_engine/storage.py
index b742d3c..8f7d55c 100644
--- a/django_mongodb_engine/storage.py
+++ b/django_mongodb_engine/storage.py
@@ -1,5 +1,5 @@
 import os
-import urlparse
+import urllib.parse
 
 from django.core.exceptions import ImproperlyConfigured
 from django.core.files.storage import Storage
@@ -125,7 +125,7 @@ class GridFSStorage(Storage):
     def url(self, name):
         if self.base_url is None:
             raise ValueError("This file is not accessible via a URL.")
-        return urlparse.urljoin(self.base_url, filepath_to_uri(name))
+        return urllib.parse.urljoin(self.base_url, filepath_to_uri(name))
 
     def created_time(self, path):
         """
diff --git a/django_mongodb_engine/utils.py b/django_mongodb_engine/utils.py
index 77aa120..26ab1a5 100644
--- a/django_mongodb_engine/utils.py
+++ b/django_mongodb_engine/utils.py
@@ -36,7 +36,7 @@ def make_struct(*attrs):
 
 
 def make_index_list(indexes):
-    if isinstance(indexes, basestring):
+    if isinstance(indexes, str):
         indexes = [indexes]
     for index in indexes:
         if not isinstance(index, tuple):
@@ -62,7 +62,7 @@ class CollectionDebugWrapper(object):
     def log(self, op, duration, args, kwargs=None):
         args = ' '.join(str(arg) for arg in args)
         msg = '%s.%s (%.2f) %s' % (self.collection.name, op, duration, args)
-        kwargs = dict((k, v) for k, v in kwargs.iteritems() if v)
+        kwargs = dict((k, v) for k, v in kwargs.items() if v)
         if kwargs:
             msg += ' %s' % kwargs
         if len(settings.DATABASES) > 1:
diff --git a/docs/source/code/mapreduce/manage.py b/docs/source/code/mapreduce/manage.py
index 3e4eedc..40ebcd5 100755
--- a/docs/source/code/mapreduce/manage.py
+++ b/docs/source/code/mapreduce/manage.py
@@ -8,7 +8,7 @@ except ImportError:
     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     sys.exit(1)
 
-import settings
+from . import settings
 
 if __name__ == "__main__":
     execute_manager(settings)
diff --git a/docs/source/code/tutorial/v1/manage.py b/docs/source/code/tutorial/v1/manage.py
index 3e4eedc..40ebcd5 100755
--- a/docs/source/code/tutorial/v1/manage.py
+++ b/docs/source/code/tutorial/v1/manage.py
@@ -8,7 +8,7 @@ except ImportError:
     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     sys.exit(1)
 
-import settings
+from . import settings
 
 if __name__ == "__main__":
     execute_manager(settings)
diff --git a/docs/source/code/tutorial/v2/manage.py b/docs/source/code/tutorial/v2/manage.py
index 3e4eedc..40ebcd5 100755
--- a/docs/source/code/tutorial/v2/manage.py
+++ b/docs/source/code/tutorial/v2/manage.py
@@ -8,7 +8,7 @@ except ImportError:
     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     sys.exit(1)
 
-import settings
+from . import settings
 
 if __name__ == "__main__":
     execute_manager(settings)
diff --git a/docs/source/code/tutorial/v3/manage.py b/docs/source/code/tutorial/v3/manage.py
index 3e4eedc..40ebcd5 100755
--- a/docs/source/code/tutorial/v3/manage.py
+++ b/docs/source/code/tutorial/v3/manage.py
@@ -8,7 +8,7 @@ except ImportError:
     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     sys.exit(1)
 
-import settings
+from . import settings
 
 if __name__ == "__main__":
     execute_manager(settings)
diff --git a/docs/source/code/tutorial/v3/nonrelblog/urls.py b/docs/source/code/tutorial/v3/nonrelblog/urls.py
index e41dc5f..3663311 100644
--- a/docs/source/code/tutorial/v3/nonrelblog/urls.py
+++ b/docs/source/code/tutorial/v3/nonrelblog/urls.py
@@ -1,7 +1,7 @@
 from django.conf.urls.defaults import patterns, url
 from django.views.generic import ListView, DetailView
 
-from models import Post
+from .models import Post
 
 
 post_detail = DetailView.as_view(model=Post)
diff --git a/docs/source/code/tutorial/v4/manage.py b/docs/source/code/tutorial/v4/manage.py
index 3e4eedc..40ebcd5 100755
--- a/docs/source/code/tutorial/v4/manage.py
+++ b/docs/source/code/tutorial/v4/manage.py
@@ -8,7 +8,7 @@ except ImportError:
     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     sys.exit(1)
 
-import settings
+from . import settings
 
 if __name__ == "__main__":
     execute_manager(settings)
diff --git a/docs/source/code/tutorial/v4/nonrelblog/urls.py b/docs/source/code/tutorial/v4/nonrelblog/urls.py
index e41dc5f..3663311 100644
--- a/docs/source/code/tutorial/v4/nonrelblog/urls.py
+++ b/docs/source/code/tutorial/v4/nonrelblog/urls.py
@@ -1,7 +1,7 @@
 from django.conf.urls.defaults import patterns, url
 from django.views.generic import ListView, DetailView
 
-from models import Post
+from .models import Post
 
 
 post_detail = DetailView.as_view(model=Post)
diff --git a/docs/source/code/tutorial/v7/manage.py b/docs/source/code/tutorial/v7/manage.py
index 3e4eedc..40ebcd5 100755
--- a/docs/source/code/tutorial/v7/manage.py
+++ b/docs/source/code/tutorial/v7/manage.py
@@ -8,7 +8,7 @@ except ImportError:
     sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
     sys.exit(1)
 
-import settings
+from . import settings
 
 if __name__ == "__main__":
     execute_manager(settings)
diff --git a/docs/source/code/tutorial/v7/nonrelblog/urls.py b/docs/source/code/tutorial/v7/nonrelblog/urls.py
index 99aa5f7..db6c3a4 100644
--- a/docs/source/code/tutorial/v7/nonrelblog/urls.py
+++ b/docs/source/code/tutorial/v7/nonrelblog/urls.py
@@ -1,6 +1,6 @@
 from django.conf.urls.defaults import patterns, url
 from django.views.generic import ListView, DetailView
-from models import Post
+from .models import Post
 
 post_detail = DetailView.as_view(model=Post)
 post_list = ListView.as_view(model=Post)
diff --git a/docs/source/utils.py b/docs/source/utils.py
index ac766aa..b0e61ed 100644
--- a/docs/source/utils.py
+++ b/docs/source/utils.py
@@ -11,6 +11,6 @@ def get_git_head():
         return check_output(['git', 'rev-parse', 'HEAD'])
     except CalledProcessError:
         pass
-    except OSError, exc:
+    except OSError as exc:
         if exc.errno != 2:
             raise
diff --git a/tests/aggregations/tests.py b/tests/aggregations/tests.py
index ed80bb3..3f6f847 100644
--- a/tests/aggregations/tests.py
+++ b/tests/aggregations/tests.py
@@ -3,7 +3,7 @@ from datetime import datetime
 from django.db.models.aggregates import Count, Sum, Max, Min, Avg
 
 from .utils import TestCase
-from models import Person
+from .models import Person
 
 
 class SimpleTest(TestCase):
diff --git a/tests/contrib/tests.py b/tests/contrib/tests.py
index 0f4c7ab..3075f2f 100644
--- a/tests/contrib/tests.py
+++ b/tests/contrib/tests.py
@@ -1,4 +1,4 @@
-from __future__ import with_statement
+
 
 from functools import partial
 
@@ -7,8 +7,8 @@ from django.db.utils import DatabaseError
 
 from django_mongodb_engine.contrib import MapReduceResult
 
-from models import *
-from utils import TestCase, get_collection, skip
+from .models import *
+from .utils import TestCase, get_collection, skip
 
 
 class MapReduceTests(TestCase):
@@ -58,9 +58,9 @@ class MapReduceTests(TestCase):
 
         # Test MapReduceResult.
         obj = documents[0].model.objects.get(id=documents[0].key)
-        self.assert_(isinstance(obj, MapReduceModel))
+        self.assertTrue(isinstance(obj, MapReduceModel))
         self.assertEqual((obj.n, obj.m), random_numbers[0])
-        self.assert_(obj.id)
+        self.assertTrue(obj.id)
 
         # Collection should not have been perished.
         if not inline:
@@ -69,7 +69,7 @@ class MapReduceTests(TestCase):
                              len(random_numbers) - 1)
 
             # Test drop_collection.
-            map_reduce(drop_collection=True).next()
+            next(map_reduce(drop_collection=True))
             self.assertEqual(get_collection('m/r-out').count(), 0)
 
         # Test arbitrary kwargs.
@@ -108,12 +108,12 @@ class MapReduceTests(TestCase):
             somedoc = MapReduceModelWithCustomPrimaryKey.objects \
                             .inline_map_reduce(mapfunc, reducefunc)[0]
         else:
-            somedoc = MapReduceModelWithCustomPrimaryKey.objects.map_reduce(
-                            mapfunc, reducefunc, out='m/r-out').next()
+            somedoc = next(MapReduceModelWithCustomPrimaryKey.objects.map_reduce(
+                            mapfunc, reducefunc, out='m/r-out'))
         self.assertEqual(somedoc.key, 'bar') # Ordered by pk.
         self.assertEqual(somedoc.value, None)
         obj = somedoc.model.objects.get(pk=somedoc.key)
-        self.assert_(not hasattr(obj, 'id') and not hasattr(obj, '_id'))
+        self.assertTrue(not hasattr(obj, 'id') and not hasattr(obj, '_id'))
         self.assertEqual(obj, MapReduceModelWithCustomPrimaryKey(pk='bar',
                                                                  data='yo?'))
 
@@ -122,7 +122,7 @@ class RawQueryTests(TestCase):
 
     def setUp(self):
 
-        for i in xrange(10):
+        for i in range(10):
             MapReduceModel.objects.create(n=i, m=i * 2)
 
     def test_raw_query(self):
@@ -240,8 +240,8 @@ class FullTextTest(TestCase):
 class DistinctTests(TestCase):
 
     def test_distinct(self):
-        for i in xrange(10):
-            for j in xrange(i):
+        for i in range(10):
+            for j in range(i):
                 MapReduceModel.objects.create(n=i, m=i * 2)
 
         self.assertEqual(MapReduceModel.objects.distinct('m'),
diff --git a/tests/embedded/tests.py b/tests/embedded/tests.py
index 4fe669c..fe9a524 100644
--- a/tests/embedded/tests.py
+++ b/tests/embedded/tests.py
@@ -1,7 +1,7 @@
 from django_mongodb_engine.query import A
 
-from models import *
-from utils import TestCase, get_collection
+from .models import *
+from .utils import TestCase, get_collection
 
 
 class EmbeddedModelFieldTestCase(TestCase):
diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py
index b97a770..3e27761 100644
--- a/tests/lookup/tests.py
+++ b/tests/lookup/tests.py
@@ -11,7 +11,7 @@ try:
 except ImportError:
     from pymongo.objectid import ObjectId
 
-from models import Author, Article, Tag
+from .models import Author, Article, Tag
 
 
 class LookupTests(TestCase):
@@ -153,13 +153,13 @@ class LookupTests(TestCase):
         self.assertQuerysetEqual(
             Article.objects.values('headline'),
             [
-                {'headline': u'Article 5'},
-                {'headline': u'Article 6'},
-                {'headline': u'Article 4'},
-                {'headline': u'Article 2'},
-                {'headline': u'Article 3'},
-                {'headline': u'Article 7'},
-                {'headline': u'Article 1'},
+                {'headline': 'Article 5'},
+                {'headline': 'Article 6'},
+                {'headline': 'Article 4'},
+                {'headline': 'Article 2'},
+                {'headline': 'Article 3'},
+                {'headline': 'Article 7'},
+                {'headline': 'Article 1'},
             ],
             transform=identity)
         self.assertQuerysetEqual(
@@ -184,13 +184,13 @@ class LookupTests(TestCase):
         self.assertQuerysetEqual(
             Article.objects.values('id', 'headline').iterator(),
             [
-                {'headline': u'Article 5', 'id': self.a5.id},
-                {'headline': u'Article 6', 'id': self.a6.id},
-                {'headline': u'Article 4', 'id': self.a4.id},
-                {'headline': u'Article 2', 'id': self.a2.id},
-                {'headline': u'Article 3', 'id': self.a3.id},
-                {'headline': u'Article 7', 'id': self.a7.id},
-                {'headline': u'Article 1', 'id': self.a1.id},
+                {'headline': 'Article 5', 'id': self.a5.id},
+                {'headline': 'Article 6', 'id': self.a6.id},
+                {'headline': 'Article 4', 'id': self.a4.id},
+                {'headline': 'Article 2', 'id': self.a2.id},
+                {'headline': 'Article 3', 'id': self.a3.id},
+                {'headline': 'Article 7', 'id': self.a7.id},
+                {'headline': 'Article 1', 'id': self.a1.id},
             ],
             transform=identity)
 
@@ -203,13 +203,13 @@ class LookupTests(TestCase):
         self.assertQuerysetEqual(
             Article.objects.values_list('headline'),
             [
-                (u'Article 5',),
-                (u'Article 6',),
-                (u'Article 4',),
-                (u'Article 2',),
-                (u'Article 3',),
-                (u'Article 7',),
-                (u'Article 1',),
+                ('Article 5',),
+                ('Article 6',),
+                ('Article 4',),
+                ('Article 2',),
+                ('Article 3',),
+                ('Article 7',),
+                ('Article 1',),
             ], transform=identity)
         self.assertQuerysetEqual(
             Article.objects.values_list('id').order_by('id'),
@@ -393,7 +393,7 @@ class LookupTests(TestCase):
         try:
             Article.objects.filter(pub_date_year='2005').count()
             self.fail("FieldError not raised.")
-        except FieldError, ex:
+        except FieldError as ex:
             self.assertEqual(
                 str(ex),
                 "Cannot resolve keyword 'pub_date_year' into field. "
@@ -401,7 +401,7 @@ class LookupTests(TestCase):
         try:
             Article.objects.filter(headline__starts='Article')
             self.fail("FieldError not raised.")
-        except FieldError, ex:
+        except FieldError as ex:
             self.assertEqual(
                 str(ex),
                 "Join on field 'headline' not permitted. "
diff --git a/tests/mongodb/tests.py b/tests/mongodb/tests.py
index 1b773b9..e6187cc 100644
--- a/tests/mongodb/tests.py
+++ b/tests/mongodb/tests.py
@@ -1,5 +1,5 @@
-from __future__ import with_statement
-from cStringIO import StringIO
+
+from io import StringIO
 
 from django.core.management import call_command
 from django.contrib.sites.models import Site
@@ -9,10 +9,10 @@ from django.db.models import Q
 from gridfs import GridOut
 from pymongo import ASCENDING, DESCENDING, ReadPreference, version_tuple as pymongo_version
 from django_mongodb_engine.base import DatabaseWrapper
-from models import *
+from .models import *
 
 
-from utils import *
+from .utils import *
 
 
 class MongoDBEngineTests(TestCase):
@@ -32,18 +32,18 @@ class MongoDBEngineTests(TestCase):
         self.assertEqual(RawModel.objects.get(raw=A('b', 3)), obj2)
 
     def test_nice_monthday_query_exception(self):
-        with self.assertRaisesRegexp(DatabaseError, "not support month/day"):
+        with self.assertRaisesRegex(DatabaseError, "not support month/day"):
             DateModel.objects.get(date__month=1)
-        with self.assertRaisesRegexp(DatabaseError, "not support month/day"):
+        with self.assertRaisesRegex(DatabaseError, "not support month/day"):
             len(DateTimeModel.objects.filter(datetime__day=1))
 
     def test_nice_int_objectid_exception(self):
         msg = "AutoField \(default primary key\) values must be strings " \
               "representing an ObjectId on MongoDB \(got u?'%s' instead\)."
-        self.assertRaisesRegexp(
-                DatabaseError, msg % u'helloworld...',
+        self.assertRaisesRegex(
+                DatabaseError, msg % 'helloworld...',
                 RawModel.objects.create, id='helloworldwhatsup')
-        self.assertRaisesRegexp(
+        self.assertRaisesRegex(
             DatabaseError, (msg % '5') +
                 " Please make sure your SITE_ID contains a valid ObjectId string.",
             Site.objects.get, id='5')
@@ -143,7 +143,7 @@ class RegressionTests(TestCase):
         self.assertEqual(obj, CustomIDModel2.objects.get(id=41))
 
     def test_multiple_exclude(self):
-        objs = [RawModel.objects.create(raw=i) for i in xrange(1, 6)]
+        objs = [RawModel.objects.create(raw=i) for i in range(1, 6)]
         self.assertEqual(
             objs[-1],
             RawModel.objects.exclude(raw=1).exclude(raw=2)
@@ -159,12 +159,12 @@ class RegressionTests(TestCase):
     def test_multiple_exclude_random(self):
         from random import randint
 
-        for i in xrange(20):
+        for i in range(20):
             RawModel.objects.create(raw=i)
 
-        for i in xrange(10):
+        for i in range(10):
             q = RawModel.objects.all()
-            for i in xrange(randint(0, 20)):
+            for i in range(randint(0, 20)):
                 q = getattr(q, 'filter' if randint(0, 1) else 'exclude')(raw=i)
             list(q)
 
@@ -242,7 +242,7 @@ class DatabaseOptionTests(TestCase):
                 ]:
                     cls_code.append('    ' + line % name)
 
-            exec '\n'.join(cls_code) in locals()
+            exec('\n'.join(cls_code), locals())
 
             options = {'OPTIONS': {'OPERATIONS': flags}}
             with self.custom_database_wrapper(options, collection_class=Collection):
@@ -335,7 +335,7 @@ class NewStyleIndexTests(TestCase):
 
         self.assertIn(index_name, info)
 
-        for key, value in dict(default_properties, **properties).iteritems():
+        for key, value in dict(default_properties, **properties).items():
             self.assertEqual(info[index_name][key], value)
 
 
@@ -369,9 +369,9 @@ class GridFSFieldTests(TestCase):
         fh = open(__file__)
         fh.seek(42)
         obj = GridFSFieldTestModel(gridfile=fh)
-        self.assert_(obj.gridfile is fh)
+        self.assertTrue(obj.gridfile is fh)
         obj.save()
-        self.assert_(obj.gridfile is fh)
+        self.assertTrue(obj.gridfile is fh)
         obj = GridFSFieldTestModel.objects.get()
         self.assertIsInstance(obj.gridfile, GridOut)
         fh.seek(42)
@@ -380,9 +380,9 @@ class GridFSFieldTests(TestCase):
     def test_gridstring(self):
         data = open(__file__).read()
         obj = GridFSFieldTestModel(gridstring=data)
-        self.assert_(obj.gridstring is data)
+        self.assertTrue(obj.gridstring is data)
         obj.save()
-        self.assert_(obj.gridstring is data)
+        self.assertTrue(obj.gridstring is data)
         obj = GridFSFieldTestModel.objects.get()
         self.assertEqual(obj.gridstring, data)
 
@@ -480,7 +480,7 @@ class GridFSFieldTests(TestCase):
         self.assertEqual(col.count(), 1)
 
     def test_update(self):
-        self.assertRaisesRegexp(
+        self.assertRaisesRegex(
             DatabaseError, "Updates on GridFSFields are not allowed.",
             GridFSFieldTestModel.objects.update, gridfile='x')
 
diff --git a/tests/multiple_database/tests.py b/tests/multiple_database/tests.py
index 8450a68..d158b29 100644
--- a/tests/multiple_database/tests.py
+++ b/tests/multiple_database/tests.py
@@ -1,7 +1,7 @@
 import datetime
 import pickle
 import sys
-from StringIO import StringIO
+from io import StringIO
 
 from django.conf import settings
 from django.contrib.auth.models import User
@@ -10,12 +10,12 @@ from django.db import connections, router, DEFAULT_DB_ALIAS
 from django.db.models import signals
 from django.db.utils import ConnectionRouter, DatabaseError
 
-from models import Book, Person, Pet, Review, UserProfile
+from .models import Book, Person, Pet, Review, UserProfile
 
 try:
     # we only have these models if the user is using multi-db, it's safe the
     # run the tests without them though.
-    from models import Article, article_using
+    from .models import Article, article_using
 except ImportError:
     pass
 
@@ -163,7 +163,7 @@ class QueryTestCase(TestCase):
 
         # Retrieve related object by descriptor. Related objects should be database-bound
         self.assertEqual(list(chris.edited.values_list('title', flat=True)),
-                          [u'Dive into Python'])
+                          ['Dive into Python'])
 
     def test_foreign_key_cross_database_protection(self):
         "Operations that involve sharing FK objects across databases raise an error"
@@ -216,37 +216,37 @@ class QueryTestCase(TestCase):
         self.assertEqual(html5._state.db, 'other')
         # ... but it isn't saved yet
         self.assertEqual(list(Person.objects.using('other').values_list('name',flat=True)),
-                          [u'Mark Pilgrim'])
+                          ['Mark Pilgrim'])
         self.assertEqual(list(Book.objects.using('other').values_list('title',flat=True)),
-                           [u'Dive into Python'])
+                           ['Dive into Python'])
 
         # When saved (no using required), new objects goes to 'other'
         chris.save()
         html5.save()
         self.assertEqual(list(Person.objects.using('default').values_list('name',flat=True)),
-                          [u'Marty Alchin'])
+                          ['Marty Alchin'])
         self.assertEqual(list(Person.objects.using('other').values_list('name',flat=True)),
-                          [u'Chris Mills', u'Mark Pilgrim'])
+                          ['Chris Mills', 'Mark Pilgrim'])
         self.assertEqual(list(Book.objects.using('default').values_list('title',flat=True)),
-                          [u'Pro Django'])
+                          ['Pro Django'])
         self.assertEqual(list(Book.objects.using('other').values_list('title',flat=True)),
-                          [u'Dive into HTML5', u'Dive into Python'])
+                          ['Dive into HTML5', 'Dive into Python'])
 
         # This also works if you assign the FK in the constructor
         water = Book(title="Dive into Water", published=datetime.date(2001, 1, 1), editor=mark)
         self.assertEqual(water._state.db, 'other')
         # ... but it isn't saved yet
         self.assertEqual(list(Book.objects.using('default').values_list('title',flat=True)),
-                          [u'Pro Django'])
+                          ['Pro Django'])
         self.assertEqual(list(Book.objects.using('other').values_list('title',flat=True)),
-                          [u'Dive into HTML5', u'Dive into Python'])
+                          ['Dive into HTML5', 'Dive into Python'])
 
         # When saved, the new book goes to 'other'
         water.save()
         self.assertEqual(list(Book.objects.using('default').values_list('title',flat=True)),
-                          [u'Pro Django'])
+                          ['Pro Django'])
         self.assertEqual(list(Book.objects.using('other').values_list('title',flat=True)),
-                          [u'Dive into HTML5', u'Dive into Python', u'Dive into Water'])
+                          ['Dive into HTML5', 'Dive into Python', 'Dive into Water'])
 
     def test_foreign_key_validation(self):
         "ForeignKey.validate() uses the correct database"
@@ -316,13 +316,13 @@ class QueryTestCase(TestCase):
         # When saved (no using required), new objects goes to 'other'
         bob_profile.save()
         self.assertEqual(list(User.objects.using('default').values_list('username',flat=True)),
-                          [u'alice'])
+                          ['alice'])
         self.assertEqual(list(User.objects.using('other').values_list('username',flat=True)),
-                          [u'bob', u'charlie'])
+                          ['bob', 'charlie'])
         self.assertEqual(list(UserProfile.objects.using('default').values_list('flavor',flat=True)),
-                           [u'chocolate'])
+                           ['chocolate'])
         self.assertEqual(list(UserProfile.objects.using('other').values_list('flavor',flat=True)),
-                           [u'crunchy frog', u'spring surprise'])
+                           ['crunchy frog', 'spring surprise'])
 
         # This also works if you assign the O2O relation in the constructor
         denise = User.objects.db_manager('other').create_user('denise','denise@example.com')
@@ -331,16 +331,16 @@ class QueryTestCase(TestCase):
         self.assertEqual(denise_profile._state.db, 'other')
         # ... but it isn't saved yet
         self.assertEqual(list(UserProfile.objects.using('default').values_list('flavor',flat=True)),
-                           [u'chocolate'])
+                           ['chocolate'])
         self.assertEqual(list(UserProfile.objects.using('other').values_list('flavor',flat=True)),
-                           [u'crunchy frog', u'spring surprise'])
+                           ['crunchy frog', 'spring surprise'])
 
         # When saved, the new profile goes to 'other'
         denise_profile.save()
         self.assertEqual(list(UserProfile.objects.using('default').values_list('flavor',flat=True)),
-                           [u'chocolate'])
+                           ['chocolate'])
         self.assertEqual(list(UserProfile.objects.using('other').values_list('flavor',flat=True)),
-                           [u'crunchy frog', u'spring surprise', u'tofu'])
+                           ['crunchy frog', 'spring surprise', 'tofu'])
 
     def test_ordering(self):
         "get_next_by_XXX commands stick to a single database"
@@ -559,7 +559,7 @@ class RouterTestCase(TestCase):
 
         # Related object queries stick to the same database
         # as the original object, regardless of the router
-        self.assertEqual(pro.editor.name, u'Marty Alchin')
+        self.assertEqual(pro.editor.name, 'Marty Alchin')
 
         # get_or_create is a special case. The get needs to be targetted at
         # the write database in order to avoid potential transaction
diff --git a/tests/query/tests.py b/tests/query/tests.py
index 3b46dee..8fce216 100644
--- a/tests/query/tests.py
+++ b/tests/query/tests.py
@@ -9,8 +9,8 @@ try:
 except ImportError:
     from pymongo.objectid import ObjectId
 
-from models import *
-from utils import *
+from .models import *
+from .utils import *
 
 
 class BasicQueryTests(TestCase):
@@ -25,7 +25,7 @@ class BasicQueryTests(TestCase):
         Blog.objects.create(title='blog1')
         self.assertEqual(Blog.objects.count(), 1)
         blog2 = Blog.objects.create(title='blog2')
-        self.assertIsInstance(blog2.pk, unicode)
+        self.assertIsInstance(blog2.pk, str)
         self.assertEqual(Blog.objects.count(), 2)
         blog2.delete()
         self.assertEqual(Blog.objects.count(), 1)
@@ -105,7 +105,7 @@ class BasicQueryTests(TestCase):
 
     def test_date_datetime_and_time(self):
         self.assertEqual(DateModel().datelist, DateModel._datelist_default)
-        self.assert_(DateModel().datelist is not DateModel._datelist_default)
+        self.assertTrue(DateModel().datelist is not DateModel._datelist_default)
         DateModel.objects.create()
         self.assertNotEqual(DateModel.objects.get().datetime, None)
         DateModel.objects.update(
@@ -343,11 +343,11 @@ class BasicQueryTests(TestCase):
         entry2 = Post.objects.create(blog=blog, title='footitle2',
                                      content='foocontent2')
         self.assertEqualLists(
-            Post.objects.values(),
-            [{'blog_id': blog.id, 'title': u'footitle', 'id': entry.id,
-              'content': u'foocontent', 'date_published': None},
-             {'blog_id': blog.id, 'title': u'footitle2', 'id': entry2.id,
-              'content': u'foocontent2', 'date_published': None}])
+            list(Post.objects.values()),
+            [{'blog_id': blog.id, 'title': 'footitle', 'id': entry.id,
+              'content': 'foocontent', 'date_published': None},
+             {'blog_id': blog.id, 'title': 'footitle2', 'id': entry2.id,
+              'content': 'foocontent2', 'date_published': None}])
         self.assertEqualLists(
             Post.objects.values('blog'),
             [{'blog': blog.id}, {'blog': blog.id}])
@@ -356,8 +356,8 @@ class BasicQueryTests(TestCase):
             [(blog.id, None), (blog.id, None)])
         self.assertEqualLists(
             Post.objects.values('title', 'content'),
-            [{'title': u'footitle', 'content': u'foocontent'},
-             {'title': u'footitle2', 'content': u'foocontent2'}])
+            [{'title': 'footitle', 'content': 'foocontent'},
+             {'title': 'footitle2', 'content': 'foocontent2'}])
 
 
 class UpdateTests(TestCase):
@@ -385,7 +385,7 @@ class UpdateTests(TestCase):
         self.assertEqual(Blog.objects.filter(title='Blog').count(), 2)
 
     def test_update_id(self):
-        self.assertRaisesRegexp(DatabaseError, "Can not modify _id",
+        self.assertRaisesRegex(DatabaseError, "Can not modify _id",
                                 Post.objects.update, id=ObjectId())
 
     def test_update_with_F(self):
@@ -602,8 +602,8 @@ class OrLookupsTests(TestCase):
             3)
 
         self.assertQuerysetEqual(
-            Article.objects.filter(Q(headline__startswith='Hello'),
-                                   Q(headline__contains='bye')).values(),
+            list(Article.objects.filter(Q(headline__startswith='Hello'),
+                                   Q(headline__contains='bye')).values()),
             [{'headline': "Hello and goodbye", 'id': self.a3,
               'pub_date': datetime.datetime(2005, 11, 29)}],
             lambda o: o)
diff --git a/tests/router/tests.py b/tests/router/tests.py
index 1bfdc4c..b658b9c 100644
--- a/tests/router/tests.py
+++ b/tests/router/tests.py
@@ -10,7 +10,7 @@ class RouterTest(TestCase):
         from query.models import Blog
         Blog.objects.create()
         self.assertEqual(Blog.objects.using('other').count(), 1)
-        self.assertRaisesRegexp(DatabaseError, "no such table",
+        self.assertRaisesRegex(DatabaseError, "no such table",
             Blog.objects.using('default').count)
 
     def test_managed_models(self):
@@ -28,5 +28,5 @@ class RouterTest(TestCase):
         self.assertEqual(SQLiteModel.objects.using('default').get(), sql_obj)
 
         self.assertEqual(SQLiteModel.objects.using('other').count(), 0)
-        self.assertRaisesRegexp(DatabaseError, "no such table",
+        self.assertRaisesRegex(DatabaseError, "no such table",
                                 MongoDBModel.objects.using('default').count)
diff --git a/tests/runtests.py b/tests/runtests.py
index 1afa1a9..5ed5271 100755
--- a/tests/runtests.py
+++ b/tests/runtests.py
@@ -11,8 +11,7 @@ def runtests(foo, settings='settings', extra=[], test_builtin=False):
     else:
         apps = foo
     if not test_builtin:
-        apps = filter(lambda name: not name.startswith('django.contrib.'),
-                      apps)
+        apps = [name for name in apps if not name.startswith('django.contrib.')]
     # pre-1.6 test runners don't understand full module names
     import django
     if django.VERSION < (1, 6):
diff --git a/tests/settings/__init__.py b/tests/settings/__init__.py
index eb9f257..e8524d1 100644
--- a/tests/settings/__init__.py
+++ b/tests/settings/__init__.py
@@ -1,4 +1,4 @@
-from settings_base import *
+from .settings_base import *
 
 
 DEFAULT_APPS = [
diff --git a/tests/storage/tests.py b/tests/storage/tests.py
index 019cbea..2237c5b 100644
--- a/tests/storage/tests.py
+++ b/tests/storage/tests.py
@@ -35,7 +35,7 @@ class GridFSStorageTest(TestCase):
         f = self.storage.open('storage_test', 'w')
         f.write('storage contents')
         f.close()
-        self.assert_(self.storage.exists('storage_test'))
+        self.assertTrue(self.storage.exists('storage_test'))
 
         test_file = self.storage.open('storage_test', 'r')
         self.assertEqual(test_file.read(), 'storage contents')
@@ -148,9 +148,9 @@ class GridFSStorageTest(TestCase):
         storage.save('storage_test_3', ContentFile('custom content'))
 
         dirs, files = self.storage.listdir('')
-        self.assertEqual(set(dirs), set([u'storage_dir_1']))
+        self.assertEqual(set(dirs), set(['storage_dir_1']))
         self.assertEqual(set(files),
-                         set([u'storage_test_1', u'storage_test_2']))
+                         set(['storage_test_1', 'storage_test_2']))
 
 
 class GridFSStorageTestWithoutLocation(GridFSStorageTest):
diff --git a/tests/utils.py b/tests/utils.py
index 51505a0..71321a9 100644
--- a/tests/utils.py
+++ b/tests/utils.py
@@ -20,7 +20,7 @@ def skip_all_except(*tests):
     class meta(type):
 
         def __new__(cls, name, bases, dict):
-            for attr in dict.keys():
+            for attr in list(dict.keys()):
                 if attr.startswith('test_') and attr not in tests:
                     del dict[attr]
             return type.__new__(cls, name, bases, dict)
